// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/paulbahush/projects/yp/gofermart/internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/PaBah/gofermart/internal/models"
	"go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockRepository) AuthorizeUser(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeUser", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockRepositoryMockRecorder) AuthorizeUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockRepository)(nil).AuthorizeUser), ctx, login)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// CreateWithdrawal mocks base method.
func (m *MockRepository) CreateWithdrawal(ctx context.Context, withdrawal models.Withdrawal) (models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, withdrawal)
	ret0, _ := ret[0].(models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockRepositoryMockRecorder) CreateWithdrawal(ctx, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockRepository)(nil).CreateWithdrawal), ctx, withdrawal)
}

// GetAllOrdersIDs mocks base method.
func (m *MockRepository) GetAllOrdersIDs(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersIDs", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersIDs indicates an expected call of GetAllOrdersIDs.
func (mr *MockRepositoryMockRecorder) GetAllOrdersIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersIDs", reflect.TypeOf((*MockRepository)(nil).GetAllOrdersIDs), ctx)
}

// GetUsersBalance mocks base method.
func (m *MockRepository) GetUsersBalance(ctx context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersBalance", ctx)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBalance indicates an expected call of GetUsersBalance.
func (mr *MockRepositoryMockRecorder) GetUsersBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersBalance", reflect.TypeOf((*MockRepository)(nil).GetUsersBalance), ctx)
}

// GetUsersOrders mocks base method.
func (m *MockRepository) GetUsersOrders(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersOrders", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersOrders indicates an expected call of GetUsersOrders.
func (mr *MockRepositoryMockRecorder) GetUsersOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersOrders", reflect.TypeOf((*MockRepository)(nil).GetUsersOrders), ctx)
}

// GetUsersWithdraw mocks base method.
func (m *MockRepository) GetUsersWithdraw(ctx context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithdraw", ctx)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithdraw indicates an expected call of GetUsersWithdraw.
func (mr *MockRepositoryMockRecorder) GetUsersWithdraw(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithdraw", reflect.TypeOf((*MockRepository)(nil).GetUsersWithdraw), ctx)
}

// GetUsersWithdrawals mocks base method.
func (m *MockRepository) GetUsersWithdrawals(ctx context.Context) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithdrawals", ctx)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithdrawals indicates an expected call of GetUsersWithdrawals.
func (mr *MockRepositoryMockRecorder) GetUsersWithdrawals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithdrawals", reflect.TypeOf((*MockRepository)(nil).GetUsersWithdrawals), ctx)
}

// RegisterOrder mocks base method.
func (m *MockRepository) RegisterOrder(ctx context.Context, orderNumber string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", ctx, orderNumber)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockRepositoryMockRecorder) RegisterOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockRepository)(nil).RegisterOrder), ctx, orderNumber)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(ctx context.Context, order models.Order) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), ctx, order)
}
